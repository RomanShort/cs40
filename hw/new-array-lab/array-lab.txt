           CS 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
|Keeper of the record:   Roman Short                     |
|--------------------------------------------------------|
| Other group member(s):  Henry Lee                      |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, i.e., an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (i.e., help us be sure you know which is which!):

A container that holds boxed objects stores only pointers to objects 
that are allocated elsewhere.
A container that holds unboxed objects allocates and manages memory for 
its contents.




1B: List two (or more) advantages of the boxed representation.

Container doesn't know or care how big a pointee is. 
If container is resized, pointers previously stored in container are 
still valid. 
Contained objects may outlive the container. 
Each element is a pointer. 






1C: List two (or more) advantages of an unboxed representation.

element can be value of any type, including struct. 
Container owns all pointers, clients borrow them temporarily using at() 
function interface more complex, but client only has to worry 
about when to allocate and free the container.
overhead for memory management is low. 






1D: Look at the interface to UArray (a link to an interface
    summary is at the start of the lab instructions). Discuss the 
    methods that show the use of the unboxed style. Why, for example, 
    does UArray_new take both a number of elements and an element size? 


UArray_new needs both number of elements and element size, in order to 
allocate length * size space, with length number of elements, each 
taking up size space. 








PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 5x7 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?


This would take 6 arrays total. One array for each of the 5 columns, 
and then 5 arrays of length 7,
one for each row. 

This would go in the 4th column, and 7th row down. 




2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assuming
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 2D array where a value [x,y] would go in the
    1D array.


5*x + y





2C. (optional) is there another mapping that would work as well?












PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics
    of the UArray2 interface from reading useuarray2.c and from running
    correct_useuarray2.


Uses a bool to ensure success of creation of array. 





